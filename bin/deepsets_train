#!/usr/bin/env python

# Run the training of the interaction network..
import argparse
import os
import sys
sys.path.append("..")

from deepsets.train import main
parser = argparse.ArgumentParser(formatter_class=argparse.
                                 ArgumentDefaultsHelpFormatter)
parser.add_argument("--gpu", type=str, default="",
                    help="Sets the number of the GPU to run on.")
parser.add_argument("--test_kfold", type=int, default=-1,
                    help="Which kfold to use for test.")
parser.add_argument("--outdir", type=str, default="test",
                    help="The output directory name.")
args = parser.parse_args()

if args.gpu:
    os.environ["CUDA_VISIBLE_DEVICES"] = args.gpu

data_hyperparams = {
    "fpath":         '../../ki_data/mlready',
    "fname":         'jet_images_c8_minpt2.0_andre_robust',
}

if args.test_kfold != -1:
    kfolds = 10
    train_kfolds = [kfold for kfold in range(kfolds) if kfold != args.test_kfold]
    data_hyperparams = {
        "fpath":        '../../ki_data/kfolded_andre',
        "fnames_train": ['jet_images_c8_minpt2.0_andre_robust_' + str(train_kfold)
                         for train_kfold in train_kfolds],
        "fname_test":   'jet_images_c8_minpt2.0_andre_robust_' + str(args.test_kfold),
    }

training_hyperparams = {
    "epochs":       300,
    "batch":        64,
    "lr":           0.0013,
    "valid_split":  0.2,
}

compilation_hyperparams = {
    "optimizer": "adam",
    "loss":      "softmax_with_crossentropy",
    "metrics":   ["categorical_accuracy"],
}

model_hyperparams = {
    "nnodes_phi": 24,
    "nnodes_rho": 32,
    "activ": 'relu',
    # "nbits": 8,
}

args = {
    "data_hyperparams":     data_hyperparams,
    "training_hyperparams": training_hyperparams,
    "model_hyperparams":    model_hyperparams,
    "compilation":          compilation_hyperparams,
    "outdir":               args.outdir,
    "deepsets_type":        "equivariant",
}

main(args)
